#include <ESP32Servo.h>
Servo roll_servo; // object representing actual servo
Servo yaw_servo;
Servo pitch_servo;

void setup() {
  // put your setup code here, to run once:
  roll_servo.attach(4); // connected to GPIO pin 4
  roll_servo.write(90); // reset position

  yaw_servo.attach(5);
  yaw_servo.write(90);

  pitch_servo.attach(18);
  pitch_servo.write(90);
}

// Computed from matlab script from paper https://static-content.springer.com/esm/art%3A10.1038%2Fs41598-023-37904-5/MediaObjects/41598_2023_37904_MOESM1_ESM.pdf
// angles in degrees at each 0.05sec time step, entire flipper path should take 4.3 seconds
// given in range from -90 to 90 deg
// static float roll[] = {
//   -66.2541, -64.5389, -61.6564, -57.8739, -53.5843, -49.2239, -45.1850, -41.7432, -39.0169, -36.9661,
//   -35.4263, -34.1647, -32.9431, -31.5706, -29.9340, -28.0034, -25.8162, -23.4480, -20.9824, -18.4884,
//   -16.0090, -13.5627, -11.1518,  -8.7709,  -6.4122,  -4.0633,  -1.7011,   0.7163,   3.2522,   5.9858,
//     8.9979,  12.3509,  16.0691,  20.1256,  24.4418,  28.8987,  33.3606,  37.7009,  41.8251,  45.6833,
//    49.2690,  52.6052,  55.7241,  58.6458,  61.3659,  63.8531,  66.0592,  67.9354,  69.4494,  70.5952,
//    71.3920,  71.8718,  72.0597,  71.9540,  71.5150,  70.6655,  69.3063,  67.3403,  64.6984,  61.3583,
//    57.3476,  52.7323,  47.5915,  41.9891,  35.9530,  29.4704,  22.5045,  15.0284,   7.0664,  -1.2704,
//    -9.7695, -18.1302, -26.0079, -33.0774, -39.1026, -43.9894, -47.8086, -50.7776, -53.2040, -55.4038,
//   -57.6158, -59.9344, -62.2801, -64.4160, -66.0080, -66.7123
// };

// static float pitch[] = {
//      0.0000,   4.3970,   8.7940,  13.1910,  17.5879,  21.9849,  26.3819,  30.7789,  35.1759,  35.0000,
//     35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,
//     35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,
//     35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,  35.0000,
//     35.0000,  35.0000,  31.3945,  26.9975,  22.6005,  18.2035,  13.8065,   9.4095,   5.0126,   0.6156,
//     -9.7047, -20.9900, -32.2753, -43.5605, -54.8458, -66.1310, -72.0000, -72.0000, -72.0000, -72.0000,
//    -72.0000, -72.0000, -72.0000, -72.0000, -72.0000, -72.0000, -72.0000, -72.0000, -72.0000, -67.8179,
//    -62.1664, -56.5149, -50.8634, -45.2119, -39.5604, -33.9089, -28.2575, -22.6060, -16.9545, -11.3030,
//     -5.6515
// };

// static float yaw[] = {
//   -36.7558, -38.1797, -39.0829, -39.5497, -39.6547, -39.4478, -38.9491, -38.1547, -37.0523, -35.6381,
//   -33.9329, -31.9893, -29.8896, -27.7333, -25.6191, -23.6271, -21.8038, -20.1572, -18.6609, -17.2652,
//   -15.9134, -14.5563, -13.1617, -11.7172, -10.2257,  -8.6967,  -7.1369,  -5.5437,  -3.9046,  -2.2016,
//    -0.4195,   1.4445,   3.3747,   5.3356,   7.2771,   9.1436,  10.8859,  12.4711,  13.8882,  15.1484,
//    16.2797,  17.3184,  18.3007,  19.2564,  20.2067,  21.1657,  22.1443,  23.1544,  24.2100,  25.3250,
//    26.5083,  27.7559,  29.0455,  30.3340,  31.5610,  32.6566,  33.5539,  34.2000,  34.5649,  34.6441,
//    34.4547,  34.0262,  33.3886,  32.5624,  31.5521,  30.3464,  28.9236,  27.2607,  25.3414,  23.1622,
//    20.7315,  18.0646,  15.1750,  12.0667,   8.7307,   5.1480,   1.3001,  -2.8157,  -7.1711, -11.6955,
//   -16.2746, -20.7590, -24.9834, -28.7911, -32.0580, -34.7112
// };

// map computed angles (degrees) to the limits of the servos, 0° to 180° (see matlab script)
// mapped_val = (val - min_val) * 180.0 / (max_val - min_val);
static float roll_mapped[] = {
  0.5943, 2.8190, 6.5579, 11.4641, 17.0282, 22.6840, 27.9228,
  32.3872, 35.9235, 38.5835, 40.5807, 42.2172, 43.8017, 45.5819,
  47.7048, 50.2089, 53.0460, 56.1178, 59.3158, 62.5508, 65.7669,
  68.9398, 72.0670, 75.1553, 78.2148, 81.2614, 84.3254, 87.4611,
  90.7504, 94.2961, 98.2031, 102.5522, 107.3750, 112.6368, 118.2352,
  124.0163, 129.8038, 135.4335, 140.7829, 145.7874, 150.4383, 154.7658,
  158.8112, 162.6009, 166.1291, 169.3553, 172.2168, 174.6504, 176.6142,
  178.1004, 179.1339, 179.7563, 180.0000, 179.8630, 179.2935, 178.1916,
  176.4286, 173.8785, 170.4518, 166.1193, 160.9171, 154.9306, 148.2625,
  140.9957, 133.1663, 124.7577, 115.7224, 106.0252, 95.6978, 84.8841,
  73.8600, 63.0154, 52.7974, 43.6275, 35.8122, 29.4736, 24.5198,
  20.6687, 17.5215, 14.6682, 11.7990, 8.7915, 5.7489, 2.9785,
  0.9134, 0
};

static float pitch_mapped[] = {
  120.9227, 128.3074, 135.6920, 143.0767, 150.4614, 157.8460, 165.2307,
  172.6153, 180.0000, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046,
  179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046,
  179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046,
  179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046,
  179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 179.7046,
  179.7046, 179.7046, 179.7046, 179.7046, 179.7046, 173.6492, 166.2645,
  158.8799, 151.4952, 144.1106, 136.7259, 129.3412, 121.9566, 104.6238,
  85.6704, 66.7170, 47.7636, 28.8103, 9.8569, 0, 0,
  0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 7.0238, 16.5153, 26.0069,
  35.4985, 44.9901, 54.4817, 63.9732, 73.4648, 82.9564, 92.4480,
  101.9396, 111.4312
};

static float yaw_mapped[] = {
  7.0230, 3.5734, 1.3853, 0.2545, 0, 0.5011, 1.7095,
  3.6338, 6.3048, 9.7309, 13.8620, 18.5705, 23.6573, 28.8815,
  34.0032, 38.8293, 43.2465, 47.2355, 50.8607, 54.2420, 57.5168,
  60.8046, 64.1832, 67.6827, 71.2960, 75.0003, 78.7793, 82.6389,
  86.6098, 90.7357, 95.0531, 99.5689, 104.2451, 108.9958, 113.6993,
  118.2212, 122.4421, 126.2824, 129.7156, 132.7687, 135.5094, 138.0257,
  140.4055, 142.7209, 145.0232, 147.3465, 149.7174, 152.1645, 154.7217,
  157.4231, 160.2897, 163.3122, 166.4364, 169.5581, 172.5305, 175.1850,
  177.3588, 178.9241, 179.8081, 180.0000, 179.5412, 178.5029, 176.9584,
  174.9567, 172.5091, 169.5881, 166.1412, 162.1124, 157.4628, 152.1833,
  146.2946, 139.8336, 132.8331, 125.3029, 117.2209, 108.5412, 99.2191,
  89.2479, 78.6963, 67.7353, 56.6418, 45.7777, 35.5434, 26.3188,
  18.4040, 11.9763
};

int num_angles = sizeof(roll_mapped) / sizeof(roll_mapped[0]);

void loop() {
  // Now consider physical starting position of the servos (in reference to global coordinates).
  // We computed the global rotation coordinates of each servo, however mapped it to 0-180 degrees for each servo locally.
  // To ensure the same angles globally, we orient the servos to match their mapped range
  // Mounting angle = - (min_angle + max_angle) / 2
  // aka servo.write(90) for each motor, then physically set starting position at the following angles
  // https://www.nature.com/articles/s41598-023-37904-5/figures/3
  // roll: globally from -66.25° to 72.05°, so mount at 2.669° globally
  // pitch: globally from -72° to 35.17°, so mount at 18.415° globally
  // yaw: globally from -39.65° to 34.6°, so mount at -2.525° globally
  // IN SUMMARY set servo 90deg to desired starting position
  for (int i = 0; i < num_angles; i++) {
    roll_servo.write(roll_mapped[i]);
    pitch_servo.write(pitch_mapped[i]);
    yaw_servo.write(yaw_mapped[i]);

    delay(50); // wait for 0.05 sec or 50 ms
  }
}
